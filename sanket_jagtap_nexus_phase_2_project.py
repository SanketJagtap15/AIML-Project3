# -*- coding: utf-8 -*-
"""Sanket Jagtap - Nexus Phase 2 Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EeMRInsDwpZDAllf5VJo0hMShP28Xtjx

# **AI/ML Project: Disease Prediction System using Machine Learning**

1. Data Collection:
"""

import pandas as pd
# Load dataset
data = pd.read_csv('/content/data.csv')
# Display first few rows to understand the data structure
print(data.head())

"""2. Data Preprocessing"""

# Handle missing values
data.dropna(inplace=True)

# Handle outliers (optional)

# Normalize or standardize features
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
data[['age', 'bmi', 'blood_pressure', 'cholesterol']] = scaler.fit_transform(data[['age', 'bmi', 'blood_pressure', 'cholesterol']])

"""3. Feature Selection"""

# Feature selection using correlation matrix or other techniques
selected_features = ['age', 'bmi', 'blood_pressure', 'cholesterol', 'family_history']
X = data[selected_features]
y = data['disease']

"""4. Model Development"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions
predictions = model.predict(X_test)

# Evaluate model
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)

"""5. Cross - Validation"""

from sklearn.model_selection import cross_val_score

# Perform cross-validation
cv_scores = cross_val_score(model, X, y, cv=5)
print("Cross-validation scores:", cv_scores)
print("Mean CV accuracy:", cv_scores.mean())

"""6. Hyperparameter Tuning"""

from sklearn.model_selection import GridSearchCV

# Define hyperparameters grid
param_grid = {'C': [0.1, 1, 10, 100], 'penalty': ['l1', 'l2']}

# Initialize GridSearchCV
grid_search = GridSearchCV(LogisticRegression(), param_grid, cv=5)
grid_search.fit(X_train, y_train)

# Get best hyperparameters
best_params = grid_search.best_params_
print("Best hyperparameters:", best_params)

# Reinitialize model with best hyperparameters
best_model = LogisticRegression(**best_params)
best_model.fit(X_train, y_train)